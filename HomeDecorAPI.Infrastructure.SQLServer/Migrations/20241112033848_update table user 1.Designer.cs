// <auto-generated />
using System;
using HomeDecorAPI.Infrastructure.SQLServer.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HomeDecorAPI.Infrastructure.SQLServer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241112033848_update table user 1")]
    partial class updatetableuser1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FavoriteProduct", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("FavoriteProducts");
                });

            modelBuilder.Entity("HomeDecorAPI.Domain.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AddressId");

                    b.Property<string>("AddressLine")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("HomeDecorAPI.Domain.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7905),
                            Description = "Comfortable and modern home decor",
                            IsActive = true,
                            Name = "CozyNest",
                            UpdatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7905)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7909),
                            Description = "High-end decoration products for home",
                            IsActive = true,
                            Name = "Luxurious Living",
                            UpdatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7910)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7911),
                            Description = "Natural and eco-friendly decor",
                            IsActive = true,
                            Name = "Nature Harmony",
                            UpdatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7911)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7912),
                            Description = "Rustic-themed decor for cozy homes",
                            IsActive = false,
                            Name = "Rustic Charm",
                            UpdatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7913)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7914),
                            Description = "Modern and sleek decor solutions",
                            IsActive = true,
                            Name = "Urban Modern",
                            UpdatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7914)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7915),
                            Description = "Vintage-inspired decor pieces",
                            IsActive = true,
                            Name = "Vintage Vibes",
                            UpdatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7915)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7916),
                            Description = "Minimalist, clutter-free designs",
                            IsActive = true,
                            Name = "Minimalist Space",
                            UpdatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7916)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7917),
                            Description = "Scandinavian-style simplicity",
                            IsActive = true,
                            Name = "Scandinavian Simplicity",
                            UpdatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7918)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7919),
                            Description = "Industrial-themed home decor",
                            IsActive = false,
                            Name = "Industrial Touch",
                            UpdatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7919)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7920),
                            Description = "Classic style for a sophisticated look",
                            IsActive = true,
                            Name = "Classic Elegance",
                            UpdatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7920)
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7921),
                            Description = "Boho-inspired vibrant decor",
                            IsActive = true,
                            Name = "Bohemian Bliss",
                            UpdatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7922)
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7923),
                            Description = "Eco-friendly decor products",
                            IsActive = true,
                            Name = "Eco Essentials",
                            UpdatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7923)
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7924),
                            Description = "Handmade artisan decor",
                            IsActive = false,
                            Name = "Artisan Crafted",
                            UpdatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7924)
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7925),
                            Description = "Modern farmhouse style decor",
                            IsActive = true,
                            Name = "Modern Farmhouse",
                            UpdatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7926)
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7927),
                            Description = "Contemporary decor for urban homes",
                            IsActive = true,
                            Name = "Contemporary Chic",
                            UpdatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7927)
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7928),
                            Description = "Soft, vintage-style decor",
                            IsActive = false,
                            Name = "Shabby Chic",
                            UpdatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7928)
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7929),
                            Description = "Elegant essentials for the home",
                            IsActive = true,
                            Name = "Elegant Essentials",
                            UpdatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7930)
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7931),
                            Description = "Beach-inspired comfortable decor",
                            IsActive = true,
                            Name = "Coastal Comfort",
                            UpdatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7931)
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7932),
                            Description = "Urban loft-style decor pieces",
                            IsActive = true,
                            Name = "Urban Loft",
                            UpdatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7932)
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7933),
                            Description = "Timeless, classic decor pieces",
                            IsActive = true,
                            Name = "Timeless Heritage",
                            UpdatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7934)
                        });
                });

            modelBuilder.Entity("HomeDecorAPI.Domain.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ShippingCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("HomeDecorAPI.Domain.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("HomeDecorAPI.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("HomeDecorAPI.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BaseSKU")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("Measurements")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("HomeDecorAPI.Domain.Entities.ProductDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CareInStructions")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Features")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<string>("MaintenanceInstructions")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Material")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Measurements")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("RecommendedCleaningProducts")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("RoomType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("WarrantyInfo")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique()
                        .HasFilter("[ProductId] IS NOT NULL");

                    b.ToTable("ProductDetails");
                });

            modelBuilder.Entity("HomeDecorAPI.Domain.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMainImage")
                        .HasColumnType("bit");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("ProductImage");
                });

            modelBuilder.Entity("HomeDecorAPI.Domain.Entities.ProductVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DiscountEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DiscountPercentage")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DiscountStartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMainVariant")
                        .HasColumnType("bit");

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariants");
                });

            modelBuilder.Entity("HomeDecorAPI.Domain.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Dislikes")
                        .HasColumnType("int");

                    b.Property<bool>("IsVerifiedPurchase")
                        .HasColumnType("bit");

                    b.Property<int?>("Likes")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("HomeDecorAPI.Domain.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Decor St",
                            City = "New York",
                            ContactPerson = "John Doe",
                            Country = "USA",
                            CreatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7386),
                            Description = "Contemporary furniture and decor",
                            Email = "johndoe@moderndesigns.com",
                            IsActive = true,
                            Name = "Modern Designs",
                            Phone = "1234567890",
                            UpdatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7388)
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Wood Ave",
                            City = "Austin",
                            ContactPerson = "Jane Smith",
                            Country = "USA",
                            CreatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7396),
                            Description = "Natural, rustic home goods",
                            Email = "janesmith@rusticroots.com",
                            IsActive = true,
                            Name = "Rustic Roots",
                            Phone = "0987654321",
                            UpdatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7397)
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Green Blvd",
                            City = "San Francisco",
                            ContactPerson = "Emma Johnson",
                            Country = "USA",
                            CreatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7399),
                            Description = "Eco-friendly decor solutions",
                            Email = "emma@ecoessentials.com",
                            IsActive = true,
                            Name = "Eco Essentials",
                            Phone = "5678901234",
                            UpdatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7399)
                        },
                        new
                        {
                            Id = 4,
                            Address = "101 Trendy St",
                            City = "Los Angeles",
                            ContactPerson = "James Brown",
                            Country = "USA",
                            CreatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7401),
                            Description = "Trendy decor for modern spaces",
                            Email = "james@urbandecor.com",
                            IsActive = false,
                            Name = "Urban Decor Co.",
                            Phone = "4561237890",
                            UpdatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7401)
                        },
                        new
                        {
                            Id = 5,
                            Address = "202 Classic Way",
                            City = "Chicago",
                            ContactPerson = "Sophia Williams",
                            Country = "USA",
                            CreatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7403),
                            Description = "Classic and vintage decor items",
                            Email = "sophia@vintagedecor.com",
                            IsActive = true,
                            Name = "Vintage Decor",
                            Phone = "8901234567",
                            UpdatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7403)
                        },
                        new
                        {
                            Id = 6,
                            Address = "303 Simplicity St",
                            City = "Seattle",
                            ContactPerson = "Olivia Taylor",
                            Country = "USA",
                            CreatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7405),
                            Description = "Minimalist-inspired decor",
                            Email = "olivia@minimalisttouch.com",
                            IsActive = true,
                            Name = "Minimalist Touch",
                            Phone = "3216549870",
                            UpdatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7405)
                        },
                        new
                        {
                            Id = 7,
                            Address = "404 Freedom Ln",
                            City = "Denver",
                            ContactPerson = "Liam Martinez",
                            Country = "USA",
                            CreatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7407),
                            Description = "Bohemian-style decor",
                            Email = "liam@bohobliss.com",
                            IsActive = false,
                            Name = "Boho Bliss",
                            Phone = "9876543210",
                            UpdatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7407)
                        },
                        new
                        {
                            Id = 8,
                            Address = "505 Craft Rd",
                            City = "Portland",
                            ContactPerson = "Mason Anderson",
                            Country = "USA",
                            CreatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7409),
                            Description = "Handcrafted decor for home",
                            Email = "mason@artisanhome.com",
                            IsActive = true,
                            Name = "Artisan Home",
                            Phone = "2345678901",
                            UpdatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7409)
                        },
                        new
                        {
                            Id = 9,
                            Address = "606 Tradition Blvd",
                            City = "Nashville",
                            ContactPerson = "Ava Thomas",
                            Country = "USA",
                            CreatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7411),
                            Description = "Timeless and classic home decor",
                            Email = "ava@timelessdecor.com",
                            IsActive = true,
                            Name = "Timeless Decor",
                            Phone = "7654321098",
                            UpdatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7411)
                        },
                        new
                        {
                            Id = 10,
                            Address = "707 World St",
                            City = "Phoenix",
                            ContactPerson = "Ethan White",
                            Country = "USA",
                            CreatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7413),
                            Description = "Globally inspired decor pieces",
                            Email = "ethan@globalgoods.com",
                            IsActive = true,
                            Name = "Global Goods",
                            Phone = "6547893210",
                            UpdatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7413)
                        },
                        new
                        {
                            Id = 11,
                            Address = "808 Nature Dr",
                            City = "Miami",
                            ContactPerson = "Amelia Harris",
                            Country = "USA",
                            CreatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7415),
                            Description = "Nature-inspired home goods",
                            Email = "amelia@naturalelements.com",
                            IsActive = true,
                            Name = "Natural Elements",
                            Phone = "1239874560",
                            UpdatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7415)
                        },
                        new
                        {
                            Id = 12,
                            Address = "909 Trendy Ave",
                            City = "Houston",
                            ContactPerson = "Lucas Clark",
                            Country = "USA",
                            CreatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7417),
                            Description = "Modern, urban-style decor",
                            Email = "lucas@urbantrends.com",
                            IsActive = false,
                            Name = "Urban Trends",
                            Phone = "7894561230",
                            UpdatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7417)
                        },
                        new
                        {
                            Id = 13,
                            Address = "1010 Cozy Ln",
                            City = "Charlotte",
                            ContactPerson = "Charlotte Robinson",
                            Country = "USA",
                            CreatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7418),
                            Description = "Rustic and cozy home decor",
                            Email = "charlotte@countrycottage.com",
                            IsActive = true,
                            Name = "Country Cottage",
                            Phone = "4567890123",
                            UpdatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7419)
                        },
                        new
                        {
                            Id = 14,
                            Address = "1111 Shore St",
                            City = "San Diego",
                            ContactPerson = "Jackson Lewis",
                            Country = "USA",
                            CreatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7420),
                            Description = "Beach-inspired decor items",
                            Email = "jackson@coastalliving.com",
                            IsActive = true,
                            Name = "Coastal Living",
                            Phone = "0987123456",
                            UpdatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7421)
                        },
                        new
                        {
                            Id = 15,
                            Address = "1212 Farmhouse Ave",
                            City = "Dallas",
                            ContactPerson = "Harper Lee",
                            Country = "USA",
                            CreatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7422),
                            Description = "Farmhouse-style decor for modern homes",
                            Email = "harper@modernfarmhouse.com",
                            IsActive = true,
                            Name = "Modern Farmhouse",
                            Phone = "2345678909",
                            UpdatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7423)
                        },
                        new
                        {
                            Id = 16,
                            Address = "1313 Nordic Rd",
                            City = "Boston",
                            ContactPerson = "Sebastian Wilson",
                            Country = "USA",
                            CreatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7424),
                            Description = "Scandinavian-inspired decor",
                            Email = "sebastian@scandihome.com",
                            IsActive = false,
                            Name = "Scandi Home",
                            Phone = "6789012345",
                            UpdatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7424)
                        },
                        new
                        {
                            Id = 17,
                            Address = "1414 Glam Blvd",
                            City = "Las Vegas",
                            ContactPerson = "Isabella King",
                            Country = "USA",
                            CreatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7426),
                            Description = "Luxury decor for upscale homes",
                            Email = "isabella@luxuryinteriors.com",
                            IsActive = true,
                            Name = "Luxury Interiors",
                            Phone = "5432109876",
                            UpdatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7426)
                        },
                        new
                        {
                            Id = 18,
                            Address = "1515 Earth St",
                            City = "Orlando",
                            ContactPerson = "Henry Scott",
                            Country = "USA",
                            CreatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7428),
                            Description = "Eco-conscious home decor solutions",
                            Email = "henry@ecohomedecor.com",
                            IsActive = true,
                            Name = "Eco Home Decor",
                            Phone = "3456789012",
                            UpdatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7428)
                        },
                        new
                        {
                            Id = 19,
                            Address = "1616 Timeless Blvd",
                            City = "Atlanta",
                            ContactPerson = "Grace Adams",
                            Country = "USA",
                            CreatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7430),
                            Description = "Elegant decor for classic homes",
                            Email = "grace@classicelegance.com",
                            IsActive = true,
                            Name = "Classic Elegance",
                            Phone = "2109876543",
                            UpdatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7430)
                        },
                        new
                        {
                            Id = 20,
                            Address = "1717 Art St",
                            City = "Los Angeles",
                            ContactPerson = "Sophia Young",
                            Country = "USA",
                            CreatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7432),
                            Description = "Art-inspired decor",
                            Email = "sophia@artisticspaces.com",
                            IsActive = true,
                            Name = "Artistic Spaces",
                            Phone = "6785432109",
                            UpdatedAt = new DateTime(2024, 11, 12, 3, 38, 48, 58, DateTimeKind.Utc).AddTicks(7432)
                        });
                });

            modelBuilder.Entity("HomeDecorAPI.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Displayname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Firstname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FavoriteProduct", b =>
                {
                    b.HasOne("HomeDecorAPI.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeDecorAPI.Domain.Entities.User", "User")
                        .WithMany("FavoriteProducts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HomeDecorAPI.Domain.Entities.Address", b =>
                {
                    b.HasOne("HomeDecorAPI.Domain.Entities.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HomeDecorAPI.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("HomeDecorAPI.Domain.Entities.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeDecorAPI.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("HomeDecorAPI.Domain.Entities.Category", b =>
                {
                    b.HasOne("HomeDecorAPI.Domain.Entities.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("HomeDecorAPI.Domain.Entities.Product", b =>
                {
                    b.HasOne("HomeDecorAPI.Domain.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId");

                    b.HasOne("HomeDecorAPI.Domain.Entities.Category", "Categories")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.HasOne("HomeDecorAPI.Domain.Entities.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId");

                    b.Navigation("Brand");

                    b.Navigation("Categories");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("HomeDecorAPI.Domain.Entities.ProductDetails", b =>
                {
                    b.HasOne("HomeDecorAPI.Domain.Entities.Product", "Product")
                        .WithOne("ProductDetails")
                        .HasForeignKey("HomeDecorAPI.Domain.Entities.ProductDetails", "ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("HomeDecorAPI.Domain.Entities.ProductImage", b =>
                {
                    b.HasOne("HomeDecorAPI.Domain.Entities.ProductVariant", "ProductVariant")
                        .WithMany("Images")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("HomeDecorAPI.Domain.Entities.ProductVariant", b =>
                {
                    b.HasOne("HomeDecorAPI.Domain.Entities.Product", "Product")
                        .WithMany("ProductVariants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("HomeDecorAPI.Domain.Entities.Review", b =>
                {
                    b.HasOne("HomeDecorAPI.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeDecorAPI.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HomeDecorAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HomeDecorAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeDecorAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HomeDecorAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HomeDecorAPI.Domain.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("HomeDecorAPI.Domain.Entities.Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("HomeDecorAPI.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("HomeDecorAPI.Domain.Entities.Product", b =>
                {
                    b.Navigation("ProductDetails");

                    b.Navigation("ProductVariants");
                });

            modelBuilder.Entity("HomeDecorAPI.Domain.Entities.ProductVariant", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("HomeDecorAPI.Domain.Entities.Supplier", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("HomeDecorAPI.Domain.Entities.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("FavoriteProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
