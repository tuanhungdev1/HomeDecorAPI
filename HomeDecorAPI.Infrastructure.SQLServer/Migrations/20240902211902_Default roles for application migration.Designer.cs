// <auto-generated />
using System;
using HomeDecorAPI.Infrastructure.SQLServer.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HomeDecorAPI.Infrastructure.SQLServer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240902211902_Default roles for application migration")]
    partial class Defaultrolesforapplicationmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CategoryProduct", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.HasKey("CategoriesId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("ProductCategory", (string)null);
                });

            modelBuilder.Entity("FavoriteProduct", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("FavoriteProducts");
                });

            modelBuilder.Entity("HomeDecorAPI.Domain.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AddressId");

                    b.Property<string>("AddressLine")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("HomeDecorAPI.Domain.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CouponCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("HomeDecorAPI.Domain.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ItemDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("HomeDecorAPI.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "All bedroom related furniture and accessories",
                            ImageUrl = "https://example.com/bedroom.jpg",
                            Name = "Bedroom"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Different types of beds",
                            ImageUrl = "https://example.com/beds.jpg",
                            Name = "Beds",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "Various bedroom lamps",
                            ImageUrl = "https://example.com/lamps.jpg",
                            Name = "Lamps",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            Id = 4,
                            Description = "Wardrobes and storage solutions",
                            ImageUrl = "https://example.com/wardrobes.jpg",
                            Name = "Wardrobes",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            Id = 5,
                            Description = "Dressers and bedroom storage",
                            ImageUrl = "https://example.com/dressers.jpg",
                            Name = "Dressers",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            Id = 6,
                            Description = "Furniture and accessories for the living room",
                            ImageUrl = "https://example.com/livingroom.jpg",
                            Name = "Living Room"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Various types of sofas for the living room",
                            ImageUrl = "https://example.com/sofas.jpg",
                            Name = "Sofas",
                            ParentCategoryId = 6
                        },
                        new
                        {
                            Id = 8,
                            Description = "Coffee tables for the living room",
                            ImageUrl = "https://example.com/coffeetables.jpg",
                            Name = "Coffee Tables",
                            ParentCategoryId = 6
                        },
                        new
                        {
                            Id = 9,
                            Description = "TV stands and media units",
                            ImageUrl = "https://example.com/tvstands.jpg",
                            Name = "TV Stands",
                            ParentCategoryId = 6
                        },
                        new
                        {
                            Id = 10,
                            Description = "Bookcases and shelving units",
                            ImageUrl = "https://example.com/bookcases.jpg",
                            Name = "Bookcases",
                            ParentCategoryId = 6
                        },
                        new
                        {
                            Id = 11,
                            Description = "Furniture and accessories for the dining room",
                            ImageUrl = "https://example.com/diningroom.jpg",
                            Name = "Dining Room"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Dining tables for the dining room",
                            ImageUrl = "https://example.com/diningtables.jpg",
                            Name = "Dining Tables",
                            ParentCategoryId = 11
                        },
                        new
                        {
                            Id = 13,
                            Description = "Dining chairs for the dining room",
                            ImageUrl = "https://example.com/diningchairs.jpg",
                            Name = "Dining Chairs",
                            ParentCategoryId = 11
                        },
                        new
                        {
                            Id = 14,
                            Description = "Bar stools and counter seating",
                            ImageUrl = "https://example.com/barstools.jpg",
                            Name = "Bar Stools",
                            ParentCategoryId = 11
                        },
                        new
                        {
                            Id = 15,
                            Description = "Furniture and accessories for the kitchen",
                            ImageUrl = "https://example.com/kitchen.jpg",
                            Name = "Kitchen"
                        },
                        new
                        {
                            Id = 16,
                            Description = "Kitchen cabinets and storage solutions",
                            ImageUrl = "https://example.com/cabinets.jpg",
                            Name = "Cabinets",
                            ParentCategoryId = 15
                        },
                        new
                        {
                            Id = 17,
                            Description = "Kitchen islands and counters",
                            ImageUrl = "https://example.com/kitchenislands.jpg",
                            Name = "Kitchen Islands",
                            ParentCategoryId = 15
                        },
                        new
                        {
                            Id = 18,
                            Description = "Furniture and accessories for outdoor spaces",
                            ImageUrl = "https://example.com/outdoor.jpg",
                            Name = "Outdoor"
                        },
                        new
                        {
                            Id = 19,
                            Description = "Seating solutions for outdoor areas",
                            ImageUrl = "https://example.com/outdoorseating.jpg",
                            Name = "Outdoor Seating",
                            ParentCategoryId = 18
                        },
                        new
                        {
                            Id = 20,
                            Description = "Tables for outdoor dining and lounging",
                            ImageUrl = "https://example.com/outdoortables.jpg",
                            Name = "Outdoor Tables",
                            ParentCategoryId = 18
                        });
                });

            modelBuilder.Entity("HomeDecorAPI.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("DiscountEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DiscountPercentage")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("IsNewExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Measurements")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 9, 2, 21, 19, 1, 700, DateTimeKind.Utc).AddTicks(1954),
                            Description = "A sleek and modern coffee table made from high-quality oak wood.",
                            DiscountEndDate = new DateTime(2024, 10, 2, 21, 19, 1, 700, DateTimeKind.Utc).AddTicks(1944),
                            DiscountPercentage = 10,
                            ImageUrl = "https://th.bing.com/th/id/OIP.j8duPDpTdbCRp96Z-V6jXQHaHa?rs=1&pid=ImgDetMain",
                            IsNewExpiryDate = new DateTime(2024, 9, 16, 21, 19, 1, 700, DateTimeKind.Utc).AddTicks(1952),
                            Measurements = "120x60x45 cm",
                            Name = "Modern Wooden Coffee Table",
                            OriginalPrice = 149.99m,
                            SKU = "WDN-COFTBL-001",
                            StockQuantity = 50,
                            UpdatedDate = new DateTime(2024, 9, 2, 21, 19, 1, 700, DateTimeKind.Utc).AddTicks(1955)
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 9, 2, 21, 19, 1, 700, DateTimeKind.Utc).AddTicks(1959),
                            Description = "A comfortable and stylish armchair upholstered in genuine leather.",
                            ImageUrl = "https://a.1stdibscdn.com/20th-century-french-leather-wing-back-armchair-c1960-for-sale-picture-2/f_13482/f_285265221651735694424/PUSHKIN_ANTIQUES_STUNNING_LATE_20thC_FRENCH_LEATHER_WING_BACK_ARMCHAIR_c_1960_03_master.jpg?width=768",
                            Measurements = "90x80x75 cm",
                            Name = "Classic Leather Armchair",
                            OriginalPrice = 299.99m,
                            SKU = "LTHR-ARMCHR-002",
                            StockQuantity = 20,
                            UpdatedDate = new DateTime(2024, 9, 2, 21, 19, 1, 700, DateTimeKind.Utc).AddTicks(1960)
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 9, 2, 21, 19, 1, 700, DateTimeKind.Utc).AddTicks(1965),
                            Description = "A minimalist floor lamp with a sleek metal frame and adjustable height.",
                            DiscountEndDate = new DateTime(2024, 10, 17, 21, 19, 1, 700, DateTimeKind.Utc).AddTicks(1963),
                            DiscountPercentage = 15,
                            ImageUrl = "https://i5.walmartimages.com/asr/3181df7b-b2e3-411e-bf47-95fe5bcd8c4b_1.c7553cfd9e1daaed9c6cd9e1544bb12b.jpeg",
                            IsNewExpiryDate = new DateTime(2024, 9, 16, 21, 19, 1, 700, DateTimeKind.Utc).AddTicks(1964),
                            Measurements = "Height: 150-180 cm",
                            Name = "Contemporary Floor Lamp",
                            OriginalPrice = 89.99m,
                            SKU = "MTL-FLRLMP-003",
                            StockQuantity = 100,
                            UpdatedDate = new DateTime(2024, 9, 2, 21, 19, 1, 700, DateTimeKind.Utc).AddTicks(1966)
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 9, 2, 21, 19, 1, 700, DateTimeKind.Utc).AddTicks(1971),
                            Description = "A beautiful vintage wall clock with a wooden frame and Roman numerals.",
                            DiscountEndDate = new DateTime(2024, 9, 17, 21, 19, 1, 700, DateTimeKind.Utc).AddTicks(1969),
                            DiscountPercentage = 5,
                            ImageUrl = "https://www.vkwoods.com/vkwoods/uploads/2022/03/TJP_7853_1024x1024.webp",
                            Measurements = "Diameter: 40 cm",
                            Name = "Vintage Wall Clock",
                            OriginalPrice = 59.99m,
                            SKU = "VTG-WLCLK-004",
                            StockQuantity = 75,
                            UpdatedDate = new DateTime(2024, 9, 2, 21, 19, 1, 700, DateTimeKind.Utc).AddTicks(1971)
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 9, 2, 21, 19, 1, 700, DateTimeKind.Utc).AddTicks(1976),
                            Description = "A luxurious dining table with a polished marble top and sturdy metal legs.",
                            DiscountEndDate = new DateTime(2024, 11, 1, 21, 19, 1, 700, DateTimeKind.Utc).AddTicks(1974),
                            DiscountPercentage = 20,
                            ImageUrl = "https://th.bing.com/th/id/R.8c5920f9aeefc029e47eb83afb6f5283?rik=ACMUfp1vINNgnQ&pid=ImgRaw&r=0",
                            IsNewExpiryDate = new DateTime(2024, 9, 16, 21, 19, 1, 700, DateTimeKind.Utc).AddTicks(1975),
                            Measurements = "200x100x75 cm",
                            Name = "Marble Dining Table",
                            OriginalPrice = 799.99m,
                            SKU = "MRB-DNTBL-005",
                            StockQuantity = 10,
                            UpdatedDate = new DateTime(2024, 9, 2, 21, 19, 1, 700, DateTimeKind.Utc).AddTicks(1977)
                        });
                });

            modelBuilder.Entity("HomeDecorAPI.Domain.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Dislikes")
                        .HasColumnType("int");

                    b.Property<bool>("IsVerifiedPurchase")
                        .HasColumnType("bit");

                    b.Property<int?>("Likes")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("HomeDecorAPI.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e4659fb8-10e6-44fc-b58a-0cf82a5b5cae",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "99c9d328-0436-402f-9d50-c4cb8c336adc",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "4c2d3c00-6f4c-40f4-a140-35e9c348dd6c",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "b8fc6920-3f96-4eb0-a814-95dd2049eeb0",
                            Name = "ContentCreator",
                            NormalizedName = "CONTENTCREATOR"
                        },
                        new
                        {
                            Id = "54145f54-0e28-48a4-a8ec-370ba8e1fb00",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CategoryProduct", b =>
                {
                    b.HasOne("HomeDecorAPI.Domain.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeDecorAPI.Domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FavoriteProduct", b =>
                {
                    b.HasOne("HomeDecorAPI.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeDecorAPI.Domain.Entities.User", "User")
                        .WithMany("FavoriteProducts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HomeDecorAPI.Domain.Entities.Address", b =>
                {
                    b.HasOne("HomeDecorAPI.Domain.Entities.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HomeDecorAPI.Domain.Entities.Cart", b =>
                {
                    b.HasOne("HomeDecorAPI.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HomeDecorAPI.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("HomeDecorAPI.Domain.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeDecorAPI.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("HomeDecorAPI.Domain.Entities.Category", b =>
                {
                    b.HasOne("HomeDecorAPI.Domain.Entities.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("HomeDecorAPI.Domain.Entities.Review", b =>
                {
                    b.HasOne("HomeDecorAPI.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeDecorAPI.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HomeDecorAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HomeDecorAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeDecorAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HomeDecorAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HomeDecorAPI.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("HomeDecorAPI.Domain.Entities.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("HomeDecorAPI.Domain.Entities.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("FavoriteProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
